using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text.RegularExpressions;

using CX4.Crawler.Models;

using HtmlAgilityPack;

namespace CX4.Crawler.JingDong
{
    /// <summary>
    /// 京东按图搜索商品
    /// </summary>
    public class JDPCImageSearchCrawler : JDPCCrawler
    {
        #region 常量

        /// <summary>
        /// 上传图片地址
        /// </summary>
        public const string URL_IMAGEUPLOAD = "https://search.jd.com/image?op=upload";

        #endregion

        #region protected

        /// <summary>
        /// 
        /// </summary>
        protected override string Referer => "https://www.jd.com";

        /// <summary>
        /// 
        /// </summary>
        /// <param name="client"></param>
        protected override void AppendRequestHeaders(HttpClient client)
        {
            client.DefaultRequestHeaders.Add("origin", "https://www.jd.com");
            base.AppendRequestHeaders(client);
        }

        #endregion

        #region 上传并获取图片

        /// <summary>
        /// 上传图片
        /// </summary>
        /// <param name="byteImage"></param>
        /// <returns></returns>
        public string UploadSearchImage(byte[] byteImage)
        {
            return HttpPostFile(URL_IMAGEUPLOAD, byteImage);
        }

        /// <summary>
        /// 提取返回的图片
        /// </summary>
        /// <param name="content"><see cref="UploadSearchImage(byte[])"/></param>
        /// <returns></returns>
        public string ExtractImageName(string content)
        {
            Regex regex = new Regex(@"callback\('(?<key>[\s\S]*?)'\)");
            var match = regex.Match(content);
            if (match.Success)
            {
                return match.Groups["key"].Value.Replace("%2", "%252");
            }
            return string.Empty;
        }

        #endregion

        #region 提取按图搜索的商品
        /// <summary>
        /// 提取按图搜索商品信息
        /// </summary>
        /// <param name="imageName"></param>
        /// <returns></returns>
        public List<SearchJDImageGoods> ExtractSearchImageGoods(string imageName)
        {
            string url = $"https://search.jd.com/image?path={imageName}&op=search";
            var html = HttpGet(url);
            var doc = BuildHtmlDocument(html);
            List<SearchJDImageGoods> list = new List<SearchJDImageGoods>();
            HtmlNodeCollection nodeList = doc.DocumentNode.SelectNodes("//div[@id=\"plist\"]//li");
            if (nodeList != null && nodeList.Any())
            {
                foreach (HtmlNode item in nodeList)
                {
                    long goodsID = Convert.ToInt64(item.Attributes["data-sku"].Value);
                    var imgNode = item.SelectSingleNode(".//div[@class=\"p-img\"]//img");
                    var goodsNameNode = item.SelectSingleNode(".//div[@class=\"p-name p-name-type3\"]//em");
                    if (imgNode != null && goodsNameNode != null)
                    {
                        var imgAttr = imgNode.Attributes["src"];
                        string imageUrl = imgAttr != null ? imgAttr.Value : imgNode.Attributes["data-lazy-img"].Value;
                        string goodsName = goodsNameNode.InnerText.Trim();
                        if (!string.IsNullOrWhiteSpace(imageUrl) && !string.IsNullOrWhiteSpace(goodsName))
                        {
                            SearchJDImageGoods model = new SearchJDImageGoods
                            {
                                GoodsID = goodsID,
                                GoodsName = goodsName,
                                ImageUrl = imageUrl
                            };
                            list.Add(model);
                        }
                    }
                }
            }
            return list;
        }
        #endregion
    }
}
